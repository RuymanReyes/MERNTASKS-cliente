{"version":3,"sources":["Context/alerta/alertaContext.js","Context/autentificacion/authContext.js","Components/auth/Login.js","Components/auth/NuevaCuenta.js","Components/layout/Navbar.js","Context/proyectos/ProyectoContext.js","Context/Tarea/TareaContext.js","Components/proyectos/Proyecto.js","Components/proyectos/ListadoProyecto.js","Components/proyectos/NuevoProyecto.js","Components/layout/Sidebar.js","Components/tareas/FormTarea.js","Components/tareas/Tarea.js","Components/tareas/ListadoTareas.js","Components/proyectos/Proyectos.js","Components/rutas/RutaPrivada.js","config/axios.js","config/token.js","Context/alerta/alertaReducer.js","Types/index.js","Context/alerta/alertaState.js","Context/autentificacion/authReducer.js","Context/autentificacion/authState.js","Context/proyectos/ProyectoReducer.js","Context/proyectos/ProyectoState.js","Context/Tarea/TareaReducer.js","Context/Tarea/TareaState.js","App.js","serviceWorker.js","index.js"],"names":["alertaContext","createContext","authContext","Login","props","useContext","AlertaContext","alerta","mostrarAlerta","AuthContext","inciarSesion","mensaje","autenticado","useState","email","password","usuario","guardarUsuario","useEffect","history","push","msg","categoria","onChange","e","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","to","registrarUsuario","nombre","confirmar","length","Navbar","usuarioAutenticado","cerrarSesion","onClick","ProyectoContext","TareaContext","Proyecto","proyecto","proyectoActual","proyectoContext","obtenerTareas","_id","ListadoProyecto","proyectos","obtenerProyectos","TransitionGroup","map","CSSTransition","key","timeout","NuevoProyecto","formulario","errorFormulario","mostrarFormulario","agregarProyecto","mostrarError","guardarProyecto","Sidebar","FormTarea","tareasContext","tareaContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","estado","seleccionarTarea","ListadoTareas","proyectosContext","eliminarProyecto","tareasproyecto","classNames","Proyectos","RutaPrivada","Component","component","cargando","render","clienteAxios","axios","create","baseURL","process","tokenAuth","token","defaults","headers","common","state","action","payload","AlertaState","useReducer","alertaReducer","dispatch","Provider","setTimeout","children","localStorage","setItem","removeItem","AuthState","initialState","getItem","AuthReducer","datos","a","post","respuesta","console","log","data","response","get","filter","ProyectoState","ProyectoReducer","resultado","proyectoID","delete","proyectoId","TareaState","TareaReducer","params","tareas","put","App","exact","path","NuevaCuenta","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.538eadae.chunk.js","sourcesContent":["import {createContext } from 'react';\n\nconst alertaContext = createContext();\n\nexport default alertaContext;","import {createContext } from 'react';\n\nconst authContext = createContext();\n\nexport default authContext;","import React, { useState, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AlertaContext from '../../Context/alerta/alertaContext';\nimport AuthContext from '../../Context/autentificacion/authContext';\n\nconst Login = (props) => {\n\t// extraer los valores del context\n\tconst alertaContext = useContext(AlertaContext);\n\tconst { alerta, mostrarAlerta } = alertaContext;\n\n\tconst authContext = useContext(AuthContext);\n\tconst { inciarSesion, mensaje, autenticado } = authContext;\n\n\tconst [ usuario, guardarUsuario ] = useState({\n\t\temail: '',\n\t\tpassword: ''\n    });\n\n    // en caso de que el password o email no exista \n    \n    useEffect( () => {\n        if( autenticado ){\n            props.history.push('/proyectos');\n\n        }\n        if ( mensaje ){\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\n\t\t}\n// eslint-disable-next-line\n    }, [mensaje, autenticado, props.history]);\n\n\t// extraer Usuario\n\n\tconst { email, password } = usuario;\n\n\tconst onChange = (e) => {\n\t\tguardarUsuario({\n\t\t\t...usuario,\n\t\t\t[e.target.name]: e.target.value\n\t\t});\n\t};\n\n\t// CUANDO EL USUARIO QUIERE INICIAR SESIÓN\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\t// Validar para no haya campos vacios\n\n\t\tif (email.trim() === '' || password.trim() === '') {\n\t\t\tmostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n\t\t}\n\n\t\t// Pasarlo al action\n\t\tinciarSesion({ email, password });\n\t};\n\n\treturn (\n\t\t<div className=\" form-usuario\">\n\t\t\t{alerta ? <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> : null}\n\n\t\t\t<div className=\"contenedor-form sombra-dark\">\n\t\t\t\t<h1>Iniciar Sesión</h1>\n\n\t\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t\t<div className=\" campo-form\">\n\t\t\t\t\t\t<label htmlFor=\"email\">Email</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\tplaceholder=\"Tu Email\"\n\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\" campo-form\">\n\t\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\tplaceholder=\"Tu Password\"\n\t\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"campo-form\">\n\t\t\t\t\t\t<input type=\"submit\" className=\" btn btn-primario btn-block\" value=\"Iniciar Sesión\" />\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\n\t\t\t\t<Link to={'/nueva-cuenta'} className=\"enlace-cuenta\">\n\t\t\t\t\tObtener Cuenta\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Login;\n","import React, {useState, useContext, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport AlertaContext from '../../Context/alerta/alertaContext';\nimport AuthContext from '../../Context/autentificacion/authContext';\n\nconst Login = (props) => {\n\n    // extraer los valores del context \n    const alertaContext = useContext(AlertaContext);\n    const { alerta, mostrarAlerta } = alertaContext;\n\n    const authContext = useContext(AuthContext);\n    const { registrarUsuario, mensaje, autenticado } = authContext;\n\n    // En caso de que el usuario se haya autenticado o registrado o sea un registro duplicado. \n\n    useEffect( () => {\n        if( autenticado ){\n            props.history.push('/proyectos');\n\n        }\n        if ( mensaje ){\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\n        }\n// eslint-disable-next-line\n    }, [mensaje, autenticado, props.history]);\n\n\n    const [usuario, guardarUsuario] = useState({\n        nombre: '',\n        email: '', \n        password:'',\n        confirmar:''\n    });\n\n    // extraer Usuario \n\n    const {nombre, email, password, confirmar } = usuario;\n\n    const onChange = (e) =>{\n        guardarUsuario({\n            ...usuario, \n            [e.target.name] : e.target.value\n        })\n\n    }\n\n    // CUANDO EL USUARIO QUIERE INICIAR SESIÓN\n        const onSubmit = e => {\n            e.preventDefault();\n\n\n            // VALIDAR NO HAYA CAMPOS VACIOS \n            if( nombre.trim() === '' || \n            email.trim() === '' || \n            password.trim() === '' || \n            confirmar.trim() === '' ) {\n                mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n                return;\n            }\n\n            // PASSWORD MINIMO DE 6 CARACTERES \n            if( password.length < 6 ) {\n                mostrarAlerta('El password debe de ser de al menos 6 carácteres', ' alerta-error');\n                return\n            }\n\n\n            // LOS DOS PASSWORD SON IGUALES \n            if( password !== confirmar ) {\n                mostrarAlerta('Los Password deben de ser iguales', ' alerta-error');\n                return\n            }\n\n            // PASARLO AL ACTION \n\n            registrarUsuario({\n                nombre, \n                email,\n                password\n            })\n        }\n\n\n\n    return ( \n        <div className=\"form-usuario\">\n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\n\n\n            <div className=\"contenedor-form sombra-dark\">\n                <h1>Obtener una Cuenta</h1>\n                \n\n                <form onSubmit={onSubmit}>\n                    \n\n                <div className=\"campo-form\">\n                        <label htmlFor=\"nombre\">Nombre</label>\n                        <input\n                            type=\"nombre\"\n                            id=\"nombre\"\n                            name=\"nombre\"\n                            placeholder=\"Tu nombre\"\n                            value={nombre}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                <div className=\"campo-form\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Tu Email\"\n                            value={email}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            value={password}\n                            placeholder=\"Tu Password\"\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"confirmar\">Confirmar Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"confirmar\"\n                            name=\"confirmar\"\n                            value={confirmar}\n                            placeholder=\"Repite tu Password\"\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <input \n                            type=\"submit\" \n                            className=\" btn btn-primario btn-block\"\n                            value=\"Registrarme\"\n                        />\n                    </div>\n                   \n                </form>\n\n                <Link to={'/'} className=\"enlace-cuenta\">\n                    Iniciar Sesión\n                </Link>\n            </div>\n        </div>\n     );\n}\n \nexport default Login\n","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../Context/autentificacion/authContext';\n\nconst Navbar = () => {\n\n// EXTRAER LA INFO DE AUTENTIFICACION \nconst authContext = useContext(AuthContext);\nconst { usuarioAutenticado, usuario, cerrarSesion } = authContext;\n\nuseEffect(() => {\n    usuarioAutenticado();\n    // eslint-disable-next-line\n}, []);\n\n\n\n\n    return ( \n        <header className=\"app-header\">\n\n            {usuario ? <p className=\" nombre-usuario\">Hola <span>{usuario.nombre}</span></p>: null }   \n\n            <nav className=\"nav-principal\">\n                <button\n                    className='btn btn-blank cerrar-sesion'\n                    onClick={ () => cerrarSesion() }    \n                >Cerrar Sesión</button>\n            </nav>\n        </header>\n     );\n}\n \nexport default Navbar;","import {createContext} from 'react';\n\nconst ProyectoContext = createContext();\n\nexport default ProyectoContext","import { createContext } from 'react';\n\nconst TareaContext = createContext();\n\nexport default TareaContext;","import React, {useContext} from 'react';\nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\nimport TareaContext from '../../Context/Tarea/TareaContext';\n\n\nconst Proyecto = ({proyecto}) => {\n\n      // Obtenemos el state del context \n    \n      const ProyectoContext = useContext(proyectoContext);\n      const {proyectoActual} = ProyectoContext;\n\n      // obtener la función del context de tarea \n\n      const tareasContext = useContext(TareaContext);\n      const {obtenerTareas} = tareasContext;\n\n      // función para agreagar el proyecto actual  \n      const selecccionarProyecto = id => {\n          proyectoActual(id);\n          obtenerTareas(id);\n      }\n  \n    return ( \n        <li>\n            <button\n                type=\"button\"\n                className=\"btn btn-blank\"\n                onClick={() => selecccionarProyecto(proyecto._id)}\n            >\n                {proyecto.nombre}\n            </button>\n        </li>\n     );\n}\n \nexport default Proyecto;","import React, { useContext, useEffect } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport AlertaContext from '../../Context/alerta/alertaContext';\nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\nimport Proyecto from './Proyecto';\n\nconst ListadoProyecto = () => {\n\n    // Obtenemos el state del context \n    \n    const ProyectoContext = useContext(proyectoContext);\n    const {proyectos, obtenerProyectos, mensaje } = ProyectoContext;\n\n    const alertaContext = useContext(AlertaContext);\n    const {alerta, mostrarAlerta } = alertaContext\n\n\n    useEffect(() => {\n\n        if ( mensaje ){\n            mostrarAlerta( mensaje.msg, mensaje.categoria )\n        }\n       obtenerProyectos();\n    // eslint-disable-next-line    \n    }, [mensaje]);\n\n    // revisamos que proyectos tiene contenido \n    if( proyectos.length === 0 ) return <p>No hay proyectos, comienza creando uno </p>;\n\n\n   \n \n    return ( \n        <ul className=\"listado-proyectos\">\n\n        { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\n\n            <TransitionGroup>\n            {proyectos.map( proyecto => (\n                <CSSTransition\n                key={proyecto._id}\n                timeout={200}\n                className=\"proyecto\"\n                >\n                    <Proyecto\n                    \n                    proyecto={proyecto}\n                />\n                </CSSTransition>\n            ))}\n            </TransitionGroup>\n        </ul>\n     );\n}\n \nexport default ListadoProyecto;","import React, {Fragment, useState, useContext} from 'react';\nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\n\nconst NuevoProyecto = () => {\n\n\n    // Obtenemos el state del context \n    \n    const ProyectoContext = useContext(proyectoContext);\n    const {formulario, errorFormulario,  mostrarFormulario, agregarProyecto, mostrarError,  } = ProyectoContext;\n\n// State para Proyecto \n    const [ proyecto, guardarProyecto, ] = useState({\n        nombre:'', \n    });\n\n    const { nombre } = proyecto \n\n    // LEE LOS CONTENIDOS DEL INPUT \n\n    const onChangeProyecto = e => {\n        guardarProyecto({\n            ...proyecto, \n            [e.target.name] : e.target.value\n        })\n    }\n\n    // CUANDO EL USUARIO ENVIA UN PROYECTO\n\n    const onSubmitProyecto = e => { \n        e.preventDefault();\n\n        // Validar el proyecto \n        if(nombre === ''){\n            mostrarError()\n            return\n        }\n\n\n        /// agregar al state\n        agregarProyecto(proyecto)\n\n        // reiniciar el form \n\n        guardarProyecto({\n            nombre: ''\n        })\n       \n    }\n    // MOSTRAR FORMAULARIO \n        const onClickFormulario = () => {\n            mostrarFormulario();\n        }\n\n\n    return ( \n        <Fragment>\n           <button\n            type=\"button\"\n            className=\"btn btn-block btn-primario\"\n            onClick={onClickFormulario}\n        >\n            Nuevo Proyecto \n        </button> \n            \n            { formulario ? (\n                <form className=\" formulario-nuevo-proyecto\" onSubmit={onSubmitProyecto}>\n                <input\n                    type=\"text\"\n                    className=\"input-text\"\n                    placeholder=\"Nombre del Proyecto\"\n                    name=\"nombre\"\n                    onChange={onChangeProyecto}\n                    value={nombre}\n                />\n    \n                <input\n                    type=\"submit\"\n                    className=\"btn btn-primario btn-block\"\n                    value=\"Agregar Proyecto\"\n                />\n    \n            </form>\n            ) : null\n            }\n\n            {errorFormulario ? <p className=\"mensaje error\">El nombre del proyecto es obligatorio</p> : null}\n        \n        </Fragment>\n        \n     );\n}\n \nexport default NuevoProyecto;","import React from 'react';\nimport ListadoProyecto from '../proyectos/ListadoProyecto';\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\n\n\nconst Sidebar = () => {\n    return ( \n        <aside>\n            <h1>MERN<span>TASK</span></h1>\n\n            <NuevoProyecto />\n\n            <div className=\"proyectos\">\n                <h2>Tus Proyectos</h2>\n                    <ListadoProyecto />\n\n            </div>\n        </aside>\n     );\n}\n \nexport default Sidebar\n","import React, { useContext, useState, useEffect } from 'react';  \nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\nimport tareaContext from '../../Context/Tarea/TareaContext';\n\nconst FormTarea = () => {\n\n    // Extrar si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto } = proyectosContext;\n\n    // obtener la función del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { tareaseleccionada,  errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\n\n    // Effect que detecta si hay una tarea seleccionada\n    useEffect(() => {\n        if(tareaseleccionada !== null) {\n            guardarTarea(tareaseleccionada)\n        } else {\n            guardarTarea({\n                nombre: ''\n            })\n        }\n    }, [  tareaseleccionada]); \n\n    // State del formulario\n    const [tarea, guardarTarea] = useState({\n        nombre: ''\n    })\n\n    // extraer el nombre del proyecto\n    const { nombre } = tarea;\n\n    // Si no hay proyecto seleccionado\n    if(!proyecto) return null;\n\n    // Array destructuring para extraer el proyecto actual\n    const [proyectoActual] =  proyecto;\n\n    // Leer los valores del formulario\n    const handleChange = e => {\n        guardarTarea({\n            ...tarea,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n\n        // validar\n        if(nombre.trim() === '' ) {\n            validarTarea();\n            return;\n        }\n\n        // Si es edición o si es nueva tarea\n        if(tareaseleccionada === null ) {\n            // agregar la nueva tarea al state de tareas\n            tarea.proyecto = proyectoActual._id;\n            agregarTarea(tarea);\n        } else {\n            // actualizar tarea existente\n            actualizarTarea(tarea);\n\n            // Elimina tareaseleccionada del state\n            limpiarTarea();\n        }\n        // Obtener y filtrar las tareas del proyecto actual\n        obtenerTareas(proyectoActual.id);\n\n        // reiniciar el form\n        guardarTarea({\n            nombre: ''\n        })\n    }\n\n    return ( \n        <div className=\"formulario\">\n            <form\n                onSubmit={onSubmit}\n            >\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"text\"\n                        className=\"input-text\"\n                        placeholder=\"Nombre Tarea...\"\n                        name=\"nombre\"\n                        value={nombre}\n                        onChange={handleChange}\n                    />\n                </div>\n\n                <div className=\"contenedor-input\">\n                    <input \n                        type=\"submit\"\n                        className=\"btn btn-primario btn-submit btn-block\"\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\n                    />\n                </div>\n            </form>\n\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p> : null }\n        </div>\n     );\n}\n \nexport default FormTarea;","import React, { useContext } from 'react';\nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\nimport tareaContext from '../../Context/Tarea/TareaContext';\n\nconst Tarea = ({tarea}) => {\n\n    // Extrar si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto } = proyectosContext;\n\n    // obtener la función del context de tarea\n    const tareasContext = useContext(tareaContext);\n    const { eliminarTarea, obtenerTareas, actualizarTarea, guardarTareaActual } = tareasContext;\n\n\n    // Extraer el proyecto\n    const [proyectoActual] = proyecto;\n \n    // Función que se ejecuta cuando el usuario presiona el btn de eliminar tarea\n    const tareaEliminar = id => {\n        eliminarTarea(id, proyectoActual._id);\n        obtenerTareas(proyectoActual.id)\n    }\n\n    // Función que modifica el estado de las tareas\n    const cambiarEstado = tarea => {\n        if(tarea.estado) {\n            tarea.estado = false;\n        } else {\n            tarea.estado = true\n        }\n        actualizarTarea(tarea);\n    }\n\n    // Agrega una tarea actual cuando el usuario desea editarla\n    const seleccionarTarea = tarea => {\n        guardarTareaActual(tarea);\n    }\n\n    return ( \n        <li className=\"tarea sombra\">\n            <p>{tarea.nombre} </p>\n\n            <div className=\"estado\">\n                {tarea.estado \n                ?  \n                    (\n                        <button\n                            type=\"button\"\n                            className=\"completo\"\n                            onClick={() => cambiarEstado(tarea)}\n                        >Completo</button>\n                    )\n                : \n                    (\n                        <button\n                            type=\"button\"\n                            className=\"incompleto\"\n                            onClick={() => cambiarEstado(tarea)}\n                        >Incompleto</button>\n                    )\n                }\n            </div>\n\n            <div className=\"acciones\">\n                <button \n                    type=\"button\"\n                    className=\"btn btn-primario\"\n                    onClick={() => seleccionarTarea(tarea) }\n                >Editar</button>\n\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secundario\"\n                    onClick={() => tareaEliminar(tarea._id)}\n                >Eliminar</button>\n            </div>\n        </li>\n     );\n}\n \nexport default Tarea;","import React, { Fragment, useContext} from 'react';\nimport Tarea from './Tarea';\nimport proyectoContext from '../../Context/proyectos/ProyectoContext';\nimport tareaContext from '../../Context/Tarea/TareaContext';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst ListadoTareas = () => {\n\n    // Extrar proyectos de state inicial\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto, eliminarProyecto } = proyectosContext;\n\n    // obtener las tareas del proyecto\n    const tareasContext = useContext(tareaContext);\n    const {tareasproyecto} = tareasContext;\n\n    // Si no hay proyecto seleccionado\n    if(!proyecto) return <h2>Selecciona un proyecto</h2>;\n\n    // Array destructuring para extraer el proyecto actual\n    const [proyectoActual] =  proyecto;\n\n    // Elimina un proyecto\n    const onClickEliminar = () => {\n        eliminarProyecto(proyectoActual._id)\n    }\n\n    return ( \n        <Fragment>\n            <h2>Proyecto: {proyectoActual.nombre} </h2>\n\n            <ul className=\"listado-tareas\">\n                {tareasproyecto.length === 0 \n                    ? (<li className=\"tarea\"><p>No hay tareas</p></li>) \n                    : \n                    <TransitionGroup>\n                    {tareasproyecto.map(tarea => (\n                        <CSSTransition\n                            key={tarea._id}\n                            timeout={200}\n                            classNames=\"tarea\"\n                        >\n                            <Tarea \n                                tarea={tarea}\n                            />\n                        </CSSTransition>\n                    ))}\n                    </TransitionGroup>\n                }\n            </ul>\n\n            <button     \n                type=\"button\"\n                className=\"btn btn-eliminar\"\n                onClick={onClickEliminar}\n            >Eliminar Proyecto &times;</button>\n        </Fragment>\n     );\n}\n \nexport default ListadoTareas;","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../Context/autentificacion/authContext';\nimport Navbar from '../layout/Navbar';\nimport Sidebar from '../layout/Sidebar';\nimport FormTarea from '../tareas/FormTarea';\nimport ListadoTareas from '../tareas/ListadoTareas';\n\n\n\nconst Proyectos = () => {\n\n// EXTRAER LA INFO DE AUTENTIFICACION \nconst authContext = useContext(AuthContext);\nconst { usuarioAutenticado } = authContext;\n\nuseEffect(() => {\n    usuarioAutenticado();\n        // eslint-disable-next-line\n    \n// eslint-disable-next-line\n}, []);\n\n    return ( \n        <div className=\"contenedor-app\">\n            <Sidebar />\n\n            <div className=\"seccion-principal\">\n\n                <Navbar />\n                <main>\n                    <FormTarea />\n                    <div className=\" contenedor-tareas\">\n                        <ListadoTareas />\n                    </div>\n                </main>\n            </div>\n        </div>\n     );\n}\n \nexport default Proyectos\n","import React, { useContext, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../../Context/autentificacion/authContext';\n\nconst RutaPrivada = ({ component: Component, ...props }) => {\n\n    const authContext = useContext(AuthContext);\n    const { autenticado, usuarioAutenticado, cargando  } = authContext;\n\n    useEffect ( () => {\n        usuarioAutenticado();\n            // eslint-disable-next-line\n// eslint-disable-next-line\n    }, []);\n\n\n    return ( \n        <Route { ...props } render={ props => !autenticado && !cargando   ? (\n            <Redirect to=\"/\" />\n        )  : (\n            <Component { ...props } />\n        ) } />\n     );\n}\n \nexport default RutaPrivada;","import axios from 'axios';\n\n\nconst clienteAxios = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL\n});\n\nexport default clienteAxios;","import clienteAxios from './axios';\n\nconst tokenAuth = token => {\n    if(token) {\n        clienteAxios.defaults.headers.common['x-auth-token'] = token;\n    } else {\n        delete clienteAxios.defaults.headers.common['x-auth-token'];\n    }\n}\n\nexport default tokenAuth;\n","  \nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../Types';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case MOSTRAR_ALERTA:\n            return {\n                alerta: action.payload\n            }\n        case OCULTAR_ALERTA:\n            return {\n                alerta: null\n            }\n        default:\n            return state;\n    }\n}","export const FORMULARIO_PROYECTO = ' PROYECTO_PROYECTO';\nexport  const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS';\nexport  const AGREGAR_PROYECTO = 'AGREGAR_PROYECTO';\nexport  const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\nexport  const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\nexport  const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\nexport const PROYECTO_ERROR = 'PROYECTO_ERROR';\n\n\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\nexport const ESTADO_TAREA = ' ESTADO_TAREA';\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';\n\nexport const MOSTRAR_ALERTA = ' MOSTRAR_ALERTA';\nexport const OCULTAR_ALERTA = ' OCULTAR_ALERTA';\n\nexport const REGISTRO_EXITO = 'REGISTRO_EXITO';\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\nexport const OBTENER_USUARIOS  = 'REGISTRO_ERROR';\nexport const LOGIN_EXITO  = 'LOGIN_EXITO';\nexport const LOGIN_ERROR  = 'LOGIN_ERROR';\nexport const CERRAR_SESION  = 'CERRAR_SESION';\n","import React, { useReducer } from 'react';\nimport alertaReducer from './alertaReducer';\nimport alertaContext from './alertaContext';\n\nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../Types';\n\nconst AlertaState = props => {\n    const initialState = {\n        alerta: null\n    }\n\n    const [ state, dispatch ] = useReducer(alertaReducer, initialState);\n\n    // Funciones\n    const mostrarAlerta = (msg, categoria) => {\n        dispatch({\n            type:  MOSTRAR_ALERTA,\n            payload: {\n                msg, \n                categoria\n            }\n        });\n\n        // Después de 5 segundos limpiar la alerta\n        setTimeout(() => {\n            dispatch({\n                type: OCULTAR_ALERTA\n            })\n        }, 5000);\n    }\n\n\n    return (\n        <alertaContext.Provider\n            value={{\n                alerta: state.alerta,\n                mostrarAlerta\n            }}\n        > \n            {props.children}\n        </alertaContext.Provider>\n    )\n}\n\nexport default AlertaState;","  \nimport { REGISTRO_ERROR,REGISTRO_EXITO, OBTENER_USUARIOS, LOGIN_EXITO, LOGIN_ERROR, CERRAR_SESION} from '../../Types';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case REGISTRO_EXITO:\n        case LOGIN_EXITO:\n            localStorage.setItem('token', action.payload.token);\n            return {\n                ...state,\n                autenticado: true,\n                mensaje: null,\n                cargando: false\n            }\n        case OBTENER_USUARIOS: \n            return {\n                ...state,\n                autenticado: true,\n                usuario: action.payload, \n                cargando: false\n            }\n        case CERRAR_SESION:\n        case LOGIN_ERROR:\n        case REGISTRO_ERROR:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                usuario: null,\n                autenticado: null,\n                mensaje: action.payload, \n                cargando: false\n            }\n        \n        default:\n            return state;\n    }\n}","import React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\n\nimport { REGISTRO_ERROR,REGISTRO_EXITO, OBTENER_USUARIOS, LOGIN_EXITO, LOGIN_ERROR, CERRAR_SESION} from '../../Types';\n\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/token';\n\nconst AuthState = props => {\n\n    const initialState = {\n        token : localStorage.getItem('token'), \n        autenticado: null, \n        usuario: null, \n        mensaje: null,\n        cargando: true,\n    };\n\n    const [state, dispatch ] = useReducer(AuthReducer, initialState);\n\n    const registrarUsuario = async datos => {\n        try {\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\n            console.log(respuesta);\n\n            dispatch({\n                type: REGISTRO_EXITO,\n                payload: respuesta.data\n            });\n\n            usuarioAutenticado();\n\n        } catch (error) {\n            console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: REGISTRO_ERROR,\n                payload: alerta\n            });\n        }\n    };\n\n        // Retorna el usuario autenticado\n        const usuarioAutenticado = async () => {\n            const token = localStorage.getItem('token');\n            if(token) {\n                tokenAuth(token);\n            }\n    \n            try {\n                const respuesta = await clienteAxios.get('/api/auth');\n                // console.log(respuesta);\n                dispatch({\n                    type: OBTENER_USUARIOS,\n                    payload: respuesta.data.usuario\n                });\n    \n            } catch (error) {\n                console.log(error.response);\n                dispatch({\n                    type: LOGIN_ERROR\n                });\n            }\n        };\n\n\n    // cuando el usuario inicia sesión \n\n    const inciarSesion = async datos => {\n        try{\n            const respuesta = await clienteAxios.post('/api/auth', datos );\n            \n            dispatch({\n                type: LOGIN_EXITO,\n                payload: respuesta.data\n            });\n\n            // obtener el usuario\n            usuarioAutenticado();\n\n        } catch ( error ) {\n            console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: alerta\n            });\n        }\n    };\n\n\n// cierra la sesión del usuario \n    const cerrarSesion = () => {\n        dispatch({\n            type: CERRAR_SESION\n        });\n    };\n\n    return (\n        <AuthContext.Provider \n            value={{\n                token: state.token, \n                autenticado: state.autenticado,\n                usuario: state.usuario, \n                mensaje: state.mensaje,\n                cargando: state.cargando, \n                registrarUsuario, \n                inciarSesion,\n                usuarioAutenticado, \n                cerrarSesion,\n            }}>\n\n                 {props.children}\n\n        </AuthContext.Provider>\n            \n    )\n}\n\nexport default AuthState \n","import { AGREGAR_PROYECTO, ELIMINAR_PROYECTO, FORMULARIO_PROYECTO, OBTENER_PROYECTOS, PROYECTO_ACTUAL, PROYECTO_ERROR, VALIDAR_FORMULARIO } from '../../Types';\n\nexport default ( state, action ) => {\n    switch(action.type){\n        case FORMULARIO_PROYECTO:\n            return {\n                ...state,\n                formulario: true \n            }\n        case OBTENER_PROYECTOS:\n            return {\n                ...state, \n                proyectos: action.payload\n            }\n            case AGREGAR_PROYECTO:\n                return {\n                    ...state,\n                    proyectos: [...state.proyectos, action.payload], \n                    formulario: false,\n                    errorFormulario: false\n                }\n            case VALIDAR_FORMULARIO:\n                return {\n                    ...state,\n                    errorFormulario: true\n                }\n\n            case PROYECTO_ACTUAL:\n                return{\n                    ...state,\n                    proyecto: state.proyectos.filter( proyecto => proyecto._id === action.payload)\n                }\n            case ELIMINAR_PROYECTO:\n                return{\n                    ...state,\n                    proyectos: state.proyectos.filter(proyecto => proyecto._id !== action.payload), \n                    proyecto: null\n                }\n            case PROYECTO_ERROR:\n                return {\n                    ...state,\n                    mensaje: action.payload\n                }\n                \n        default:\n            return state;\n    }\n}","import React, {useReducer} from 'react';\n\nimport ProyectoContext from './ProyectoContext';\nimport ProyectoReducer from './ProyectoReducer';\nimport clienteAxios from '../../config/axios';\n\nimport {FORMULARIO_PROYECTO, OBTENER_PROYECTOS, AGREGAR_PROYECTO, VALIDAR_FORMULARIO, PROYECTO_ACTUAL, ELIMINAR_PROYECTO, PROYECTO_ERROR } from '../../Types/index';\n\n\nconst ProyectoState = props => {\n\n   \n    const initialState = { \n\n        proyectos : [],\n\n        formulario : false,\n\n        errorFormulario: false,\n\n        proyecto: null,\n\n        mensaje: null\n    };\n\n    // Dispatch para ejecutar las acciones \n\n    const [state, dispatch] = useReducer(ProyectoReducer, initialState);\n\n    // SERIE DE FUNCIONES PARA EL CRUD DE PROYECTO \n\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_PROYECTO\n        });\n    }\n\n    // obtener los proyectos \n\n    const obtenerProyectos = async () => {\n        try{\n            const resultado = await clienteAxios.get('/api/proyectos');\n            console.log(resultado)\n\n            dispatch ({\n                type: OBTENER_PROYECTOS,\n                payload: resultado.data.proyectos\n            });\n\n        } catch(error){\n            const alerta = {\n                msg: 'Hubo un error', \n                categoria: ' alerta.error'\n            }\n            dispatch({\n                type:PROYECTO_ERROR, \n                payload: alerta \n            })\n        }\n    }\n\n    // crear un nuevo proyecto \n    const agregarProyecto = async proyecto => {\n        \n        try{\n            const resultado = await clienteAxios.post('/api/proyectos', proyecto );\n            console.log(resultado)\n            dispatch({\n                type: AGREGAR_PROYECTO,\n                payload: resultado.data\n            })\n\n        } catch(error){\n            const alerta = {\n                msg: 'Hubo un error', \n                categoria: ' alerta.error'\n            }\n            dispatch({\n                type:PROYECTO_ERROR, \n                payload: alerta \n            })\n        }\n    }\n\n    const mostrarError = () =>{\n        dispatch({\n            type: VALIDAR_FORMULARIO\n        });\n    };\n\n    // selecciona el proyecto que el usuarui dio click\n\n    const proyectoActual = proyectoId =>{\n        dispatch({\n           type: PROYECTO_ACTUAL,\n        payload: proyectoId  \n        }); \n    };\n\n    // ELIMINA UN PROYECTO \n    const eliminarProyecto = async proyectoID => {\n\n        try{\n            await clienteAxios.delete(`/api/proyectos/${proyectoID}`);\n            dispatch({\n                type: ELIMINAR_PROYECTO,\n                payload: proyectoID\n            });\n        } catch(error){\n            const alerta = {\n                msg: 'Hubo un error', \n                categoria: ' alerta.error'\n            }\n            dispatch({\n                type:PROYECTO_ERROR, \n                payload: alerta \n            })\n        }\n       \n    };\n\n\n    return ( \n        <ProyectoContext.Provider\n            value ={{ \n                formulario: state.formulario,\n                proyectos: state.proyectos,\n                errorFormulario: state.errorFormulario,\n                proyecto: state.proyecto,\n                mensaje: state.mensaje,\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto, \n                mostrarError, \n                proyectoActual,\n                eliminarProyecto\n            }}\n        >\n            {props.children}\n        </ProyectoContext.Provider>\n    )\n}\n\nexport default ProyectoState;","import { \n    TAREAS_PROYECTO,\n    AGREGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIZAR_TAREA,\n    LIMPIAR_TAREA\n} from '../../Types';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case TAREAS_PROYECTO:\n            return {\n                ...state,\n                tareasproyecto: action.payload\n            }\n        case AGREGAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: [action.payload, ...state.tareasproyecto],\n                errortarea: false\n            }\n        case VALIDAR_TAREA:\n            return {\n                ...state,\n                errortarea: true\n            }\n        case ELIMINAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload )\n            }\n        case ACTUALIZAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload : tarea )\n            }\n        case TAREA_ACTUAL:\n            return {\n                ...state,\n                tareaseleccionada: action.payload\n            }\n        case LIMPIAR_TAREA:\n            return {\n                ...state,\n                tareaseleccionada: null\n            }\n        default:\n            return state;\n    }\n}","import React, { useReducer } from 'react';\nimport clienteAxios from '../../config/axios';\nimport { ACTUALIZAR_TAREA, AGREGAR_TAREA, ELIMINAR_TAREA, LIMPIAR_TAREA, TAREAS_PROYECTO, TAREA_ACTUAL, VALIDAR_TAREA } from '../../Types';\nimport TareaContext from './TareaContext';\nimport TareaReducer from './TareaReducer';\n\n\n\nconst TareaState = props => {\n    const initialState = {\n        tareasproyecto: [],\n        errortarea: false,\n        tareaseleccionada: null\n    }\n\n    // Crear dispatch y state\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\n\n    // Crear las funciones\n\n    // Obtener las tareas de un proyecto\n    const obtenerTareas = async proyecto => {\n\n        console.log(proyecto);\n\n        try {\n            const resultado = await clienteAxios.get('/api/tareas', { params: { proyecto }});\n            console.log(resultado);\n            dispatch({\n                type: TAREAS_PROYECTO,\n                payload: resultado.data.tareas\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Agregar una tarea al proyecto seleccionado\n    const agregarTarea = async tarea => {\n        console.log(tarea);\n        try {\n            const resultado = await clienteAxios.post('/api/tareas', tarea);\n            console.log(resultado);\n            dispatch({\n                type: AGREGAR_TAREA,\n                payload: tarea\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Valida y muestra un error en caso de que sea necesario\n    const validarTarea = () => {\n        dispatch({\n            type: VALIDAR_TAREA\n        })\n    }\n\n    // Eliminar tarea por id\n    const eliminarTarea = async (id, proyecto) => {\n        try {\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto }});\n            dispatch({\n                type: ELIMINAR_TAREA,\n                payload: id\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    // Edita o modifica una tarea\n    const actualizarTarea = async tarea => {\n\n        try {\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\n            \n            dispatch({\n                type: ACTUALIZAR_TAREA,\n                payload: resultado.data.tarea\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    // Extrae una tarea para edición\n    const guardarTareaActual = tarea => {\n        dispatch({\n            type: TAREA_ACTUAL,\n            payload: tarea\n        })\n    }\n\n\n\n    // Elimina la tareaseleccionada\n    const limpiarTarea = () => {\n        dispatch({\n            type: LIMPIAR_TAREA\n        })\n    }\n\n    return (\n        <TareaContext.Provider\n            value={{\n                tareasproyecto : state.tareasproyecto,\n                errortarea: state.errortarea,\n                tareaseleccionada: state.tareaseleccionada,\n                obtenerTareas,\n                agregarTarea,\n                validarTarea,\n                eliminarTarea,\n                guardarTareaActual,\n                actualizarTarea,\n                limpiarTarea\n            }}\n        >\n            {props.children}\n        </TareaContext.Provider>\n    )\n}\n\nexport default TareaState;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './Components/auth/Login';\nimport NuevaCuenta from './Components/auth/NuevaCuenta';\nimport Proyectos from './Components/proyectos/Proyectos';\nimport RutaPrivada from './Components/rutas/RutaPrivada';\nimport tokenAuth from './config/token';\nimport AlertaState from './Context/alerta/alertaState';\nimport AuthState from './Context/autentificacion/authState';\nimport ProyectoState from './Context/proyectos/ProyectoState';\nimport TareaState from './Context/Tarea/TareaState';\n\n\n\n\n\n// REvisar que tenemos un token \n\nconst token = localStorage.getItem('token');\nif(token){\n  tokenAuth(token);\n}\n\nfunction App() {\n  \n  return (\n    <ProyectoState>\n      <TareaState>\n        <AlertaState>\n          <AuthState>\n            <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n              <RutaPrivada exact path=\"/proyectos\" component={Proyectos} />\n            </Switch>\n           </Router> \n          </AuthState>\n        </AlertaState>\n      </TareaState>\n    </ProyectoState>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}